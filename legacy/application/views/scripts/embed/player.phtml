<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <link rel="stylesheet" href="<?php echo $this->css ?>" type="text/css">
    <script src="<?php echo $this->playerhtml5_js ?>" type="text/javascript"></script>
    <!-- get rid of jquery (PRO accelerated loading CONS drop i18n intenalization)
    script src="<?php echo $this->jquery ?>" type="text/javascript"></script>
    <script src="<?php echo $this->jquery_i18n ?>" type="text/javascript"></script-->
    <script src="/locale/general-translation-table" type="text/javascript"></script>
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,100,300,700' rel='stylesheet' type='text/css'>

 <script src="https://cdn.jsdelivr.net/npm/hls.js@1"></script>
     <script type="text/javascript">
        //$.i18n.setDictionary(general_dict);

        var MAX_MOBILE_SCREEN_WIDTH = 760;

        var Html5Player = function() {
            var id_element = getRandomIdPlayer(3000);
            this.mobileDetect = this.mobileDetect();
            this.playerMode = "<?php echo $this->playerMode ?>";
            this.settings = {
                'elementId': id_element, // leave alone
                'autoplay': false, // or true (only works on some browsers)
                'forceHTTPS': false, // or true if the stream is in SSL (beware of the listening port, usually 8000)
                'replacePort': false, // false for disabled or '8000' as the usual start port, forces to specify replacePortTo.
                'replacePortTo': '' // either '' to use the default port of the browser (80/http, 443/https) or '8443' to force the port of the stream.
            };

            if (this.playerMode == "manual") {
                this.settings.url = <?php echo $this->streamURL ?>;
                this.settings.codec = "<?php echo $this->codec ?>";
            } else if (this.playerMode == "file") {
                this.settings.url = <?php echo $this->streamURL ?>;
                this.settings.codec = "<?php echo $this->codec ?>";
            } else if (this.playerMode == "auto") {
                this.availableMobileStreamQueue = <?php echo $this->availableMobileStreams ?>;
                this.availableDesktopStreamQueue = <?php echo $this->availableDesktopStreams ?>;
                var stream = this.getNextAvailableStream();
                this.settings.url = stream["url"];
                this.settings.codec = stream["codec"];
            }
this.settings.url="http://localhost/hls/main";
            // Create the Muses player object
            playerhtml5_insert(this.settings);
            playerhtml5_audio = document.getElementById(id_element);
            if (playerhtml5_audio.played == true) togglePlayStopButton();

            // Configure player title
            var player_title = <?php echo $this->player_title ?>;
            if (player_title === null) {
                ///TODO without JQuery
                //$(".airtime_header").hide();
                //$(".airtime_player").css('height', '150px');
            } else {
                //$("p.station_name").html(player_title);
                document.getElementById('station_name').textContent=player_title;
            }

            attachStreamMetadataToPlayer();

            // detects events in HTML5 mode

        };
        Html5Player.prototype.mobileDetect = function() {
            return (screen.width <= MAX_MOBILE_SCREEN_WIDTH);
        }

        // This function is called if an error occurs while a client is
        // attempting to connect to a stream (An error would occur if
        // the streams listener count has been maxed out or if the stream is down).
        // It checks if the client is a mobile device or not and returns the next
        // best available stream.
        Html5Player.prototype.getNextAvailableStream = function() {
            if (this.mobileDetect && this.availableMobileStreamQueue.length > 0) {
                return this.getNextAvailableMobileStream();
            }

            if (!this.mobileDetect && this.availableDesktopStreamQueue.length > 0) {
                return this.getNextAvailableDesktopStream();
            }

            // If we get to this point there are no available streams for the
            // type of device the client has connected with so just return
            // the next available stream - first we'll try the desktop streams
            var desktopStream = this.getNextAvailableDesktopStream();
            if (desktopStream) {
                return desktopStream;
            } else {
                return this.getNextAvailableMobileStream();
            }

        }

        // Gets and returns the next available mobile stream from the queue,
        // but adds it back to the end of the queue to be recycled.
        Html5Player.prototype.getNextAvailableMobileStream = function() {
            var stream = this.availableMobileStreamQueue.shift();
            //add to end of queue
            this.availableMobileStreamQueue.push(stream);
            return stream;
        }

        // Gets and returns the next available desktop stream from the queue,
        // but adds it back to the end of the queue to be recycled.
        Html5Player.prototype.getNextAvailableDesktopStream = function() {
            var stream = this.availableDesktopStreamQueue.shift();
            //add to end of queue
            this.availableDesktopStreamQueue.push(stream);
            return stream;
        }

        Html5Player.prototype.play = function() {
            console.log('play');
            //playerhtml5_audio.src = this.settings.url;
            playerhtml5_audio.play();
            togglePlayStopButton();
        };

        Html5Player.prototype.stop = function() {
            console.log('stop');
            playerhtml5_audio.pause();
            togglePlayStopButton();
        };

        function togglePlayStopButton() {
            document.getElementById("play_button").classList.toggle("hide_button");
            document.getElementById("stop_button").classList.toggle("hide_button");
        }


        window.onload=function(){ 
            let playbuts=document.getElementsByClassName('play');
            playbuts[0].onClick=function(){  
        
                if (playbuts[0].hasClass("pause"))
                    html5Player.stop();
                else  
                    html5Player.play();
                playbuts[0].classList.toggle("pause");
            };
        }
        /*$(document).ready(function() {
            $(".play").click(function() {
                if ($(this).hasClass("pause")) {
                    html5Player.stop();
                } else {
                    html5Player.play();
                }

                $(this).toggleClass("pause");
            });
        });*/

        // variables for updating the player's metadata
        var time_to_next_track_starts = 0;
        var metadataTimer = null;
        var current_track_end_time;var current_track_start_time;
        function fillNodeArray( arr,content){
	   //for(let i=0;i<arr.length;++i) arr[i].innerHTML=content;
	  Array.prototype.filter.call(
	  arr,
	  function (elmt) {
	       elmt.innerHTML=content;
	       console.log(content);
	  },
	);
	};
        // Fetches the streams metadata from the Airtime live-info API
        // and attaches it to the player UI.
        //
        // The metadata is fetched when the current track is about to end.
        function attachStreamMetadataToPlayer() {
        
            let metadataxhr = new XMLHttpRequest();
            metadataxhr.open('GET', "<?php echo $this->metadata_api_url ?>?type=interval&limit=5&version=18");
            metadataxhr.onload = function() {
                    if (metadataxhr.status != 200) { metadataxhr.onerror();return;}
 
                    let data=JSON.parse(this.response);
                    var nowdivs=document.getElementsByClassName('now_playing');                    
		    var rcursor=document.getElementById("radio_cursor");
                    if (data.current === null) {
                        if (data.currentShow != null && data.currentShow.length > 0) {
                            //Master/show source have no current track but they do have a current show.
                            //$("div.now_playing").html($.i18n._("On Air") + "<span>" + data.currentShow[0].name + "</span>");
                            fillNodeArray(nowdivs,"On Air" + "<span>" + data.currentShow[0].name + "</span>");
                        } else {
                            //$("div.now_playing").html($.i18n._("Off Air") + "<span>" + $.i18n._("Offline") + "</span>");
                            fillNodeArray(nowdivs,"Off Air" + "<span>" + "Offline" + "</span>");
                        }
                        time_to_next_track_starts = 20000;
                    } else {
                    
                        //console.log( data.current.name);
                        var artist = '';// data.current.name;//.split(" - ")[0];
                        var track =data.current.name;//.split(" - ")[1];
                        var nowPlayingHtml = "";
                        if (artist) {
                            nowPlayingHtml += artist+" - ";
                        }
                        if (track) {
                            nowPlayingHtml +=  track ;
                        }
                         
                        //$("div.now_playing").html(nowPlayingHtml);
                        fillNodeArray(nowdivs,nowPlayingHtml);

                        current_track_end_time = new Date(data.current.ends);
                        var artwork_url=data.current.metadata.artwork_url;
                        
                        artwork_url=artwork_url.replace('&amp;','&');
                        //$("#artwork_image").attr('src', artwork_url );
                        document.getElementById('artwork_image').src=artwork_url;
                        
                        if (current_track_end_time == "Invalid Date" || isNaN(current_track_end_time)) {
                            // If the conversion didn't work (since the String is not in ISO format)
                            // then change it to be ISO-compliant. This is somewhat hacky and may break
                            // if the date string format in live-info changes!
                            current_track_end_time = new Date((data.current.ends).replace(" ", "T"));
                        }
                        var current_time = new Date();
                        //convert current_time to UTC to match the timezone of time_to_next_track_starts
                        current_time = new Date(current_time.getTime() + current_time.getTimezoneOffset() * 60 * 1000);
                        current_track_start_time= new Date((data.current.starts).replace(" ", "T"));
                        time_to_next_track_starts = current_track_end_time - current_time;
                       }


                    let schedule_list=document.getElementsByClassName('schedule_list');
                    if (data.next === null) {
                        //$("ul.schedule_list").find("li").html($.i18n._("Nothing scheduled"));
                        schedule_list[0].children[0].innerHTML="Nothing scheduled";
                    } else {
                        //$("ul.schedule_list").find("li").html(data.next.name);
                        schedule_list[0].children[0].innerHTML=data.next.name;
                        
                    }
                    
                    
                 //Preventative code if the local and remote clocks are out of sync.
            if (isNaN(time_to_next_track_starts) || time_to_next_track_starts < 0) {
                time_to_next_track_starts = 0;
            }

            
		var current_time = new Date();
		var current_time = new Date(current_time.getTime() + current_time.getTimezoneOffset() * 60 * 1000);

		/*if (current_track_end_time === undefined )
			time_to_next_track_starts=0;
		else*/
			time_to_next_track_starts = current_track_end_time - current_time;
		 
		 
		var cursor_ratio=rcursor.clientWidth/rcursor.parentNode.clientWidth; ///cursor size in perc of its parent
		var time_from_start_time= (current_time-current_track_start_time ) /(current_track_end_time-current_track_start_time); 
		console.log(time_from_start_time);//hoping perc
		//time_from_start_time=0;
		time_from_start_time=time_from_start_time*(1.0-cursor_ratio);
		var transl=(1.0-cursor_ratio)/cursor_ratio;
		console.log(transl);//hoping perc 
		

		 // $("#radio_cursor").attr('style', cursor_transition );
		console.log('current_track_end_time'+current_track_end_time);
		console.log('current_time'+current_time);
		console.log('time_to_next_track_starts'+time_to_next_track_starts/1000);  		 
		 
		 
		const cursoranimate = [
		{ transform: "translate("+(time_from_start_time*100/cursor_ratio)+"%) " },
		{ transform: "translate("+transl*100+"%) " },
		];
		const cursoranimateTiming = {
		duration: time_to_next_track_starts ,
		iterations: 1,
		};
		console.log(rcursor.clientWidth/rcursor.parentNode.clientWidth);	
		//rcursor.style="	width:"+cursor_ratio+"%;";	
		rcursor.animate(cursoranimate, cursoranimateTiming);    
		/*rcursor.classList.add ('notransform');  
		// Add 3 seconds to the timeout so Airtime has time to update the metadata before we fetch it 
		metadataTimer = null; 
		rcursor.style= cursor_transition; 
		rcursor.classList.remove ('notransform');  */
		metadataTimer= setTimeout(attachStreamMetadataToPlayer,time_to_next_track_starts+ 3000);
		 //Math.max(time_to_next_track_starts+ 3000,0) );    
                    
                    
                    
                    
                }
                
                /*function() {
  if (metadataxhr.status != 200) { // analyse l'état HTTP de la réponse
    alert(`Error ${metadataxhr.status}: ${metadataxhr.statusText}`); // e.g. 404: Not Found
  } else { // show the result
    alert(`Done, got ${metadataxhr.response.length} bytes`); // response est la réponse du serveur
  }
};*/
//metadataxhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

metadataxhr.onerror = function() {
  console.log("Metadata request failed, relaunching in 5 sec");
  metadataTimer= setTimeout(attachStreamMetadataToPlayer, 5000);
}; 
metadataxhr.send( ); 

            /*$.ajax({
                url: "/api/live-info",
                data: {
                    type: "interval",
                    limit: "5"
                },
                dataType: "jsonp",
                success: function(data) {

                    if (data.current === null) {
                        if (data.currentShow != null && data.currentShow.length > 0) {
                            //Master/show source have no current track but they do have a current show.
                            $("p.now_playing").html($.i18n._("On Air") + "<span>" + data.currentShow[0].name + "</span>");
                        } else {
                            $("p.now_playing").html($.i18n._("Off Air") + "<span>" + $.i18n._("Offline") + "</span>");
                        }
                        time_to_next_track_starts = 20000;
                    } else {
                    
                        console.log( data.current.name);
                        var artist = '';// data.current.name;//.split(" - ")[0];
                        var track =data.current.name;//.split(" - ")[1];
                        var nowPlayingHtml = "";
                        if (artist) {
                            nowPlayingHtml += artist+" - ";
                        }
                        if (track) {
                            nowPlayingHtml +=  track ;
                        }
                        console.log(nowPlayingHtml);
                        $("div.now_playing").html(nowPlayingHtml);

                        current_track_end_time = new Date(data.current.ends);
                        var artwork_url=data.current.metadata.artwork_url;
                        
                        artwork_url=artwork_url.replace('&amp;','&');
                        //artwork_url='https://deltacast.hd.free.fr/api/track?id=26&return=artwork';
                        $("#artwork_image").attr('src', artwork_url );
                        if (current_track_end_time == "Invalid Date" || isNaN(current_track_end_time)) {
                            // If the conversion didn't work (since the String is not in ISO format)
                            // then change it to be ISO-compliant. This is somewhat hacky and may break
                            // if the date string format in live-info changes!
                            current_track_end_time = new Date((data.current.ends).replace(" ", "T"));
                        }
                        var current_time = new Date();
                        //convert current_time to UTC to match the timezone of time_to_next_track_starts
                        current_time = new Date(current_time.getTime() + current_time.getTimezoneOffset() * 60 * 1000);
                        current_track_start_time= new Date((data.current.starts).replace(" ", "T"));
                        time_to_next_track_starts = current_track_end_time - current_time;
                       }

                    if (data.next === null) {
                        $("ul.schedule_list").find("li").html($.i18n._("Nothing scheduled"));
                    } else {
                        $("ul.schedule_list").find("li").html(data.next.name);
                    }
                }
            });
             //Preventative code if the local and remote clocks are out of sync.
            if (isNaN(time_to_next_track_starts) || time_to_next_track_starts < 0) {
                time_to_next_track_starts = 0;
            }

            
		var current_time = new Date();
		var current_time = new Date(current_time.getTime() + current_time.getTimezoneOffset() * 60 * 1000);

		/*if (current_track_end_time === undefined )
			time_to_next_track_starts=0;
		else* /
			time_to_next_track_starts = current_track_end_time - current_time;
		var time_from_start_time= (current_time-current_track_start_time ) /(current_track_end_time-current_track_start_time); 
		console.log(time_from_start_time);//hoping perc
		var cursor_ratio=3; ///cursor size in perc of its parent
		var transl=(100*(100-cursor_ratio))/cursor_ratio;
		console.log(transl);//hoping perc
		transl=transl-(time_from_start_time)*100*(100-cursor_ratio)/cursor_ratio;
		console.log(transl);//hoping perc
		//transl=0;
		var cursor_transition="position:relative;left:"+time_from_start_time*100+"%;height: 100%;width: "+cursor_ratio+"%; transform: translate("+transl+"%);background-color: #787878;opacity:0.5;display: block;transition: transform linear "+time_to_next_track_starts/1000+"s;  ";

		 // $("#radio_cursor").attr('style', cursor_transition );
		console.log('current_track_end_time'+current_track_end_time);
		console.log('current_time'+current_time);
		console.log('time_to_next_track_starts'+time_to_next_track_starts/1000);         
		document.getElementById("radio_cursor").style=  cursor_transition;         
		// Add 3 seconds to the timeout so Airtime has time to update the metadata before we fetch it 
		metadataTimer = null; 
		metadataTimer= setTimeout(attachStreamMetadataToPlayer,time_to_next_track_starts+ 3000);
		 //Math.max(time_to_next_track_starts+ 3000,0) );
*/
           


        }
    </script>

    <style type="text/css">
        /*
        We have to have the default Muses skin displayed on the page or else
        the player will not work. Setting the display to none and hidden does
        not work. It has to be "visible" on the page. As a hacky work around we
        set the height and width to 1px so users will not see it.
        */
        #html5player_skin {
            width: 800;
            height: 800;
            overflow: hidden;
        }
        #time_bar{
            width:100%;
            overflow:hidden;
            height: 20px;   
            //background-color:rgb(53,230,197);
            display:inline-block;
        } 
        #radio_cursor
        {
            width:3%;
            position:relative;
            display: block; 
            height: 100%;
            background-color: #787878;
            opacity:0.5;
        }
    </style>

</head>

<body>

    <div id="player" <?php if ($this->player_style == "basic") echo "style='display:block;'";
                        else echo "style='display:none'"; ?>>
        <div class="airtime_player">

            <div class="airtime_header">
                <p id="station_name">station_name</p>
            </div>

            <div class="airtime_box">
                <span id="artwork">
                <img  id="artwork_image" src="/css/images/maintenance.png"   onerror='this.src="/css/images/maintenance.png"' style="width: 50px;padding-left:15px;" ></img>
                </span>
                <div class="airtime_button">
                    <span id="play_button" class="play_button" onclick="html5Player.play()"></span>
                    <span id="stop_button" class="stop_button hide_button" onclick="html5Player.stop()"></span>
                </div>
                <div id="div_playing">
                <div class="now_playing" style></div>
                <div id="time_bar">  <div id="radio_cursor" > </div></div>
                </div>

            </div>

            <div style="clear:both"></div>

            <div class="airtime_schedule">
                <p class="airtime_next"><?php echo _("Next") ?></p>
                <ul class="schedule_list">
                    <li></li>
                </ul>
            </div>
            <a class="airtime_pro" target="_blank" href="<?php echo PRODUCT_SITE_URL; ?>"><?php printf(_('Powered by %s'), PRODUCT_NAME); ?></a>

        </div>
    </div>

    <div id="premium_player" <?php if ($this->player_style == "premium") echo "style='display:block;'";
                                else echo "style='display:none'"; ?>>
        <div class="bottom_bar">
            <div class="play cont_btn"></div>

            <div class="on_air">
                <div class="now_playing"></div>
            </div>
        </div>

    </div>

    <div id="html5player_skin">
        <script type="text/javascript">
            var html5Player = new Html5Player();
            var audios=document .getElementsByTagName('video');
            var video=audios[0];
/*var player = videojs(   audio.id);
player.play();
////*/
 var videoSrc = html5Player.settings.url ;// "https://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8";
 if (Hls.isSupported()) {
    var hls = new Hls();
    hls.loadSource(videoSrc);
    hls.attachMedia(video);
    video.play();
  }
  // HLS.js is not supported on platforms that do not have Media Source
  // Extensions (MSE) enabled.
  //
  // When the browser has built-in HLS support (check using `canPlayType`),
  // we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video
  // element through the `src` property. This is using the built-in support
  // of the plain video element, without using HLS.js.
  //
  // Note: it would be more normal to wait on the 'canplay' event below however
  // on Safari (where you are most likely to find built-in HLS support) the
  // video.src URL must be on the user-driven white-list before a 'canplay'
  // event will be emitted; the last video event that can be reliably
  // listened-for when the URL is not on the white-list is 'loadedmetadata'.
  else if (video.canPlayType('application/vnd.apple.mpegurl')) {
    video.src = videoSrc;
  }
        </script>
    </div>

</body>

</html>
